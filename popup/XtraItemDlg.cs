using DevExpress.XtraEditors;
using DevExpress.XtraTreeList;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using WindowsFormsApp1.Comm;
using WindowsFormsApp1.popup_info;

namespace WindowsFormsApp1.popup
{
    public partial class XtraItemDlg : WindowsFormsApp1.Base.XtraBaseForm
    {
        public XtraItemDlg()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Uncomment next line to set the total number of data records stored within your source
            // unboundSource1.SetRowCount(42);
            // This line of code is generated by Data Source Configuration Wizard
            
            // This line of code is generated by Data Source Configuration Wizard
            
        }

        // This event is generated by Data Source Configuration Wizard
        void UnboundSource1_ValueNeeded(object sender, DevExpress.Data.UnboundSourceValueNeededEventArgs e)
        {

            // Handle this event to obtain data from your data source
            // e.Value = something /* TODO: Assign the real data here.*/
        }

        // This event is generated by Data Source Configuration Wizard
        void UnboundSource1_ValuePushed(object sender, DevExpress.Data.UnboundSourceValuePushedEventArgs e)
        {

            // Handle this event to save modified data back to your data source
            // something = e.Value; /* TODO: Propagate the value into the storage.*/
        }

        private void SimpleButton1_Click(object sender, EventArgs e)
        {
            QryData();
            
        }


        /// <summary>
        /// 자재및 장비 TreeList 정보를 조회한다.
        /// </summary>
        private void QryData()
        {


            CHeader Header = new CHeader(UserInfo.UserID, "A0111D", "XtraQryProject", "00000", "");

            DataTable data = new DataTable("item_list");

            DataColumn colItemParent= new DataColumn("item_parent", typeof(string));


            data.Columns.Add(colItemParent);

            DataRow Dr = data.NewRow();
            Dr["item_parent"] = "test";


            data.Rows.Add(Dr);

            CParam Param = new CParam(data);
            
            DataSet ds = CTransfer.QryData(Header, Param.GetDataSet());

            DataTable Dt = ds.Tables["eror_dt"];
            itemErrCd.Caption = Dt.Rows[0]["err_cd"].ToString();
            itemErrMsg.Caption = Dt.Rows[0]["err_msg"].ToString();

            DataTable Data = ds.Tables["Table"];


            treeList1.DataSource = Data;

        }

        /// <summary>
        /// Drop 하기 전에 이벤트를 처리한다.
        /// 아이템 밑에 아이템은 불가
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void TreeList1_BeforeDropNode(object sender, DevExpress.XtraTreeList.BeforeDropNodeEventArgs e)
        {            





            Console.WriteLine("aaaa");
            if (treeList1.FindNodeByID(e.DestinationNode.Id)["node_tp"].ToString() == "2")
            {
                XtraMessageBox.Show("아이템은 하위 정보를 가질 수 없습니다. Node를 생성하세요");

                e.Cancel = true;

                return;
            }


            int parent_key, item_key;


            try
            {
                parent_key = Convert.ToInt16(treeList1.FindNodeByID(e.DestinationNode.Id)["item_key"]);
                item_key =Convert.ToInt16(treeList1.FindNodeByID(e.SourceNode.Id)["item_key"]);


                CHeader Header = new CHeader(UserInfo.UserID, "A0111E", "XtraItemDlg", "00000", "");

                DataTable data = new DataTable("item_list");

                DataColumn colItemParent = new DataColumn("parent", typeof(int));
                DataColumn colItemitem = new DataColumn("item_key", typeof(int));


                data.Columns.Add(colItemParent);
                data.Columns.Add(colItemitem);

                DataRow Dr = data.NewRow();
                Dr["parent"] = parent_key;
                Dr["item_key"] = item_key;


                data.Rows.Add(Dr);

                CParam Param = new CParam(data);

                DataSet ds = CTransfer.QryData(Header, Param.GetDataSet());

                DataTable Dt = ds.Tables["eror_dt"];
                itemErrCd.Caption = Dt.Rows[0]["err_cd"].ToString();
                itemErrMsg.Caption = Dt.Rows[0]["err_msg"].ToString();

                if (Dt.Rows[0]["err_cd"].ToString() != "00000")
                {                    
                    XtraMessageBox.Show("서버 저장중 오류가 발생했습니다.재 조회후 다시 처리 합시다.");
                    e.Cancel = true;
                    return;
                }

            }
            catch (Exception err)
            {
                string strMsg = string.Format("{0}[{1}]", "서버 저장중 오류가 발생했습니다. 재 조회후 다시 처리 합시다.", err.Message.ToString());

                XtraMessageBox.Show(strMsg);

                e.Cancel = true;

                return;
            }



        }

        /// <summary>
        /// Drag and Drop 되고 나서 이벤트 처리
        /// 서버에 정보를 정정한다.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void TreeList1_AfterDropNode(object sender, DevExpress.XtraTreeList.AfterDropNodeEventArgs e)
        {
 

//
        }


        private void TreeList1_GetStateImage(object sender, DevExpress.XtraTreeList.GetStateImageEventArgs e)
        {
            if (treeList1.FindNodeByID(e.Node.Id)["node_tp"].ToString() == "1")
            {
                e.NodeImageIndex = 0;
            }
            else
            {
                e.NodeImageIndex = 1;
            }            
        }

        private void BtnAddTreeNode_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            int nParent;
            int nItemKey;

            nParent = Convert.ToInt16(treeList1.FocusedNode["parent"]);
            nItemKey = Convert.ToInt16(treeList1.FocusedNode["item_key"]);







        }

        private void TreeList1_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == System.Windows.Forms.MouseButtons.Right)
            {
                TreeList treeList = sender as TreeList;
                TreeListHitInfo info = treeList.CalcHitInfo(e.Location);
                if (info.Node != null)
                {
                    if (info.Node["node_tp"].ToString() == "1" )
                    {

                        Point mpoint = new Point();
                        mpoint.X = e.X;
                        mpoint.Y = e.Y;

                        treeList.FocusedNode = info.Node;
                        contextMenuStrip1.Show(treeList1, mpoint);
                        
                    }
                    else
                    {
                        
                    }

                    

                }
            }
        }

        private void AddNode_Click(object sender, EventArgs e)
        {

            string strNodeNm;



            using (xtraAddNode frmAddNode = new xtraAddNode())
            {
                //frmAddNode.Parent = this;

                if (frmAddNode.ShowDialog() == DialogResult.OK)
                {
                    strNodeNm = frmAddNode.edtNodeNm.Text;

                    if (strNodeNm.Trim() == "")
                    {
                        XtraMessageBox.Show("Node 명을 확인하세요");
                        return;
                    }
                    else
                    {
                        AddTreeNode(strNodeNm);
                    }
                }

            }

            
            //if (XtraDialog.Show(frmAddNode, "NODE 추가", MessageBoxButtons.OKCancel) == DialogResult.OK)
            //{
                
            //}
        }


        private void AddTreeNode(string strTreeNode)
        {

            
            

            try
            {

                

                CHeader Header = new CHeader(UserInfo.UserID, "A0111F", "XtraItemDlg", "00000", "");


                

                DataTable data = new DataTable("item_list");

                DataColumn colItemParent = new DataColumn("parent", typeof(string));
                DataColumn colItemitem = new DataColumn("item_name", typeof(string));


                data.Columns.Add(colItemParent);
                data.Columns.Add(colItemitem);

                DataRow Dr = data.NewRow();
                Dr["parent"] = treeList1.FocusedNode["item_key"].ToString();
                Dr["item_name"] = strTreeNode;

                

                data.Rows.Add(Dr);

                CParam Param = new CParam(data);

                DataSet ds = CTransfer.QryData(Header, Param.GetDataSet());

                DataTable Dt = ds.Tables["eror_dt"];
                itemErrCd.Caption = Dt.Rows[0]["err_cd"].ToString();
                itemErrMsg.Caption = Dt.Rows[0]["err_msg"].ToString();

                if (Dt.Rows[0]["err_cd"].ToString() != "00000")
                {
                    XtraMessageBox.Show("서버 저장중 오류가 발생했습니다.재 조회후 다시 처리 합시다.");
                    
                    return;
                }
                else
                {
                    /*
                     * 정상처리 된 후 TreeNode를 추가한다. 
                     */

                    QryData();

                }
            }
            catch (Exception err)
            {
                string strMsg = string.Format("{0}[{1}]", "서버 저장중 오류가 발생했습니다. 재 조회후 다시 처리 합시다.", err.Message.ToString());

                XtraMessageBox.Show(strMsg);
                
                return;
            }



        }
    }
}
